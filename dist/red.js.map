{"version":3,"sources":["red.js"],"names":["red","Post_Header","author_name","time_ago","post_points","point_plural","Post_Title","post_link","post_title","Post_Body","post_body","Post_Image_Body","post_src","post_src_set","post_image_link","Post_Video_Body","video_src","poster_src","Post","post_header","Comment","left_padding","author_class","comment_points","body","Loading","msPerSecond","msPerMinute","msPerHour","msPerDay","msPerMonth","msPerYear","defaults","show_loading_animation","post_author","show_post","show_post_title","show_post_header","show_post_body","show_comments_section","show_comments_section_header","ignore_sticky_comments","max_depth","open_links_in_new_tab","padding_per_depth","initial_padding","improve_spoiler_links","spoiler_links","add_missing_defaults","opts","key","hasOwnProperty","embed","url","div","console","log","prerenderDiv","innerHTML","xhr","XMLHttpRequest","open","onload","renderDiv","response","outputHTML","post_data","data","children","comments","window","score","formatScore","author","timeDifference","Date","now","created_utc","permalink","title","selftext_html","he","decode","post_hint","preview_default_src","preview_src_set","preview","images","target","variants","gif","resolutions","image_object","width","source","media","reddit_video","fallback_url","media_embed","content","error","post","push","commentQ","i","length","body_html","stickied","item_data","depth","initial_shift","shift_diff","pop","comment","is_submitter","replies","join","getElementsByTagName","anchor","includes","getAttribute","href","setAttribute","getElementsByClassName","spoiler","JSON","parse","responseText","send","current","previous","elapsed","units","Number","MAX_VALUE","names","val","Math","floor","thousands","hundreds","round","setDefaults","newDefaults","embedAll","document","hasAttribute","e"],"mappings":"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","file":"red.js","sourceRoot":"..","sourcesContent":["var red = function(){\r\n\r\n  // TEMPLATES\r\n\r\n  /*\r\n    All templates use named arguements\r\n  */\r\n\r\n//Split up post comments so they can easily be disabled\r\nconst Post_Header = ({\r\nauthor_name,\r\ntime_ago,\r\npost_points,\r\npoint_plural,\r\n}) =>`\r\n<div class=\"author-info\">\r\n    Posted by ${author_name}\r\n    <span class=\"left-space\">&nbsp${post_points} point${point_plural}</span>\r\n    <span class=\"left-space bold\">&#183;</span>\r\n    <span class=\"left-space\"> ${time_ago}</span>\r\n</div>\r\n<div class=\"header-spacer\"></div>\r\n`;\r\nconst Post_Title = ({\r\npost_link,\r\npost_title,\r\n}) =>`\r\n<a class=\"title\" href=\"${post_link}\">${post_title}</a>\r\n<div class=\"title-spacer\"></div>\r\n`;\r\nconst Post_Body = ({\r\npost_body,\r\n}) =>`\r\n<div class=\"comment-body\">\r\n  ${post_body}\r\n</div>\r\n`;\r\n\r\nconst Post_Image_Body = ({\r\npost_src,\r\npost_src_set,\r\npost_image_link,\r\n}) =>`\r\n<div class=\"image-container\">\r\n  <a href=\"${post_image_link}\" target=\"_blank\">\r\n    <img srcset=\"${post_src_set}\" src=\"${post_src}\">\r\n    </img>\r\n  </a>\r\n</div>\r\n`;\r\n\r\nconst Post_Video_Body = ({\r\nvideo_src,\r\nposter_src,\r\n}) =>`\r\n<div class=\"video-container\">\r\n    <video src=\"${video_src}\" poster=\"${poster_src}\" preload=\"auto\" playsinline controls>\r\n    </video>\r\n</div>\r\n`;\r\n\r\nconst Post = ({\r\npost_header,\r\npost_title,\r\npost_body,\r\n}) =>`\r\n<div>\r\n  ${post_header}\r\n  ${post_title}\r\n  ${post_body}\r\n</div>\r\n`;\r\n\r\nconst Comment = ({\r\nleft_padding,\r\npost_link,\r\nauthor_name,\r\nauthor_class,\r\ncomment_points,\r\npoint_plural,\r\ntime_ago,\r\nbody\r\n}) =>`\r\n<div class=\"comment\" style=\"padding-left:${left_padding}px\">\r\n    <div class=\"author-info\">\r\n        <a href=\"${post_link}\" class=\"${author_class}\">${author_name}</a>\r\n        <span class=\"left-space\">&nbsp${comment_points} point${point_plural}</span>\r\n        <span class=\"left-space bold\">&#183;</span>\r\n        <span class=\"left-space\"> ${time_ago}</span>\r\n    </div>\r\n    <div class=\"comment-body\">\r\n      ${body}\r\n    </div>\r\n</div>\r\n`;\r\n\r\nconst Loading = `\r\n<div class=\"loader\">\r\n  <div class=\"spin-center\"></div>\r\n\r\n  <div class=\"inner-spin\">\r\n    <div class=\"inner-arc inner-arc_start-a\"></div>\r\n    <div class=\"inner-arc inner-arc_end-a\"></div>\r\n    <div class=\"inner-arc inner-arc_start-b\"></div>\r\n    <div class=\"inner-arc inner-arc_end-b\"></div>\r\n    <div class=\"inner-moon-a\"></div>\r\n    <div class=\"inner-moon-b\"></div>\r\n  </div>\r\n\r\n  <div class=\"outer-spin\">\r\n    <div class=\"outer-arc outer-arc_start-a\"></div>\r\n    <div class=\"outer-arc outer-arc_end-a\"></div>\r\n    <div class=\"outer-arc outer-arc_start-b\"></div>\r\n    <div class=\"outer-arc outer-arc_end-b\"></div>\r\n    <div class=\"outer-moon-a\"></div>\r\n   <div class=\"outer-moon-b\"></div>\r\n  </div>\r\n\r\n</div>\r\n`;\r\n\r\n// END OF TEMPLATE SECTION\r\n\r\nconst msPerSecond = 1000;\r\nconst msPerMinute = msPerSecond * 60;\r\nconst msPerHour = msPerMinute * 60;\r\nconst msPerDay = msPerHour * 24;\r\nconst msPerMonth = msPerDay * 30;\r\nconst msPerYear = msPerDay * 365;\r\n\r\nconst defaults = {\r\n  show_loading_animation: true,\r\n  post_title: false, // optional arguement will override the title if it's set\r\n  post_author: false,\r\n  show_post: true, // Note setting this to false will override the 3 options below\r\n  show_post_title: true,\r\n  show_post_header: true,\r\n  show_post_body: true,\r\n  show_comments_section: true,\r\n  show_comments_section_header: true,\r\n  ignore_sticky_comments: false,\r\n  max_depth: -1,\r\n  open_links_in_new_tab: true,\r\n  padding_per_depth: 24,\r\n  initial_padding: 4,\r\n  improve_spoiler_links: true,\r\n}\r\nconst spoiler_links = ['/s', '#s', '/spoiler', '#spoiler']\r\n\r\n\r\nfunction setDefaults(newDefaults) {\r\n  for(const key in newDefaults){\r\n    if(key in newDefaults){\r\n      defaults[key] = newDefaults[key]\r\n    }\r\n    else{\r\n      throw key + \" is not a valid default option\"\r\n    }\r\n  }\r\n}\r\n\r\nfunction add_missing_defaults(opts){\r\n  // Fill in missings defaults from opts\r\n  for(const key in defaults)\r\n    if(!opts.hasOwnProperty(key))\r\n      opts[key] = defaults[key]\r\n}\r\n\r\nfunction embed(url, div, opts = defaults){\r\n  add_missing_defaults(opts)\r\n  console.log(\"Requesting JSON from reddit: \" + url)\r\n  if(opts.show_loading_animation){\r\n    prerenderDiv(div, opts)\r\n  }\r\n  const xhr = new XMLHttpRequest();\r\n  xhr.open('GET', url, true);\r\n  xhr.onload = () => {\r\n    renderDiv(JSON.parse(xhr.responseText), div, opts);\r\n  }\r\n  xhr.send();\r\n}\r\n\r\n// Stateless by design\r\n// Extracts all data needed from HTML attributes\r\n// Should only be called after the HTML has loaded!\r\nfunction embedAll(){\r\n  let opts = defaults\r\n  for(const div of document.getElementsByClassName(\"reddit-embed\")){\r\n    if(!div.hasAttribute(\"red-href\"))\r\n      continue\r\n    if(div.hasAttribute(\"red-opts\")){\r\n      try{\r\n        opts = JSON.parse(div.getAttribute(\"red-opts\"))\r\n      }catch(e){console.error(e)}\r\n    }\r\n    if(div.hasAttribute(\"red-title\"))\r\n      opts.post_title = div.getAttribute(\"red-title\")\r\n    if(div.hasAttribute(\"red-author\"))\r\n      opts.post_author = div.getAttribute(\"red-author\")\r\n\r\n    embed(div.getAttribute(\"red-href\"), div, opts)\r\n    // Reset options\r\n    opts = defaults\r\n  }\r\n}\r\n\r\n// Helper functions for renderDiv\r\nfunction timeDifference(current, previous) {\r\n    const elapsed = current - previous;\r\n    const units = [msPerSecond, msPerMinute, msPerHour, msPerDay, msPerMonth, msPerYear, Number.MAX_VALUE]\r\n    const names = ['second',    'minute',    'hour',    'day',    'month',    'year',    'forever']\r\n    for(let i=1; i<units.length; i++){\r\n      if(elapsed < units[i]){\r\n        const val = Math.floor(elapsed/units[i-1])\r\n        if(val==1){\r\n          return val + ' ' + names[i-1] + ' ago'\r\n        }\r\n        else{\r\n          return val + ' ' + names[i-1] + 's ago'\r\n        }\r\n      }\r\n    }\r\n}\r\n\r\nfunction formatScore(score){\r\n  // Converts score to string if it's large\r\n  if(score > 999){\r\n    const thousands = Math.floor(score/1000)\r\n    const hundreds = Math.round((score-thousands*1000)/100)\r\n    if(hundreds==0){\r\n      return thousands + 'k'\r\n    }\r\n    else{\r\n      return thousands + '.' + hundreds + 'k'\r\n    }\r\n  }\r\n  //IMPORTANT leave it as integer if we don't  format it\r\n  else\r\n    return score\r\n}\r\n\r\nfunction prerenderDiv(div, opts = defaults){\r\n  add_missing_defaults(opts)\r\n  const post_header = opts.post_author ?\r\n  `\r\n  <div class=\"author-info\">\r\n      Posted by ${opts.post_author}\r\n  </div>\r\n  <div class=\"header-spacer\"></div>\r\n  ` :\r\n  `\r\n  <div class=\"author-info\">\r\n  </div>\r\n  <div class=\"header-spacer\"></div>\r\n  `\r\n\r\n  const post_title = Post_Title({\r\n    post_link: '',\r\n    post_title: opts.post_title,\r\n  })\r\n  div.innerHTML = Post({\r\n    post_header: opts.show_post && opts.show_post_header && (opts.post_title || opts.post_author) ? post_header:'',\r\n    post_title: opts.show_post && opts.show_post_title && opts.post_title ? post_title:'',\r\n    post_body: Loading,\r\n  })\r\n\r\n}\r\n\r\nfunction renderDiv(response, div, opts = defaults){\r\n  add_missing_defaults(opts)\r\n\r\n  const outputHTML = []\r\n  const post_data = response[0].data.children[0].data\r\n  const comments = response[1].data.children\r\n  window.comments = comments\r\n  window.post_data = post_data\r\n\r\n\r\n\r\n  // Renders post seperately since json structure\r\n  // is much different from a comment\r\n  if(opts.show_post){\r\n    post_data.score = formatScore(post_data.score)\r\n    const post_header = Post_Header({\r\n      author_name: opts.post_author || post_data.author,\r\n      time_ago: timeDifference(Date.now(), post_data.created_utc*1000),\r\n      post_points: post_data.score,\r\n      point_plural: post_data.score == 1 ? '':'s',\r\n    })\r\n    const post_title = Post_Title({\r\n      post_link: 'https://reddit.com'+post_data.permalink,\r\n      post_title: opts.post_title || post_data.title,\r\n    })\r\n    let post_body = ''\r\n    // Regular text post\r\n    if(post_data.selftext_html){\r\n      post_body = Post_Body({\r\n        post_body:he.decode(post_data.selftext_html)\r\n      })\r\n    }\r\n    // Video or Image post\r\n    else if(post_data.post_hint){\r\n      if(post_data.post_hint == 'image'){\r\n        let preview_default_src = ''\r\n        let preview_src_set = ''\r\n        if(post_data.preview.images){\r\n          let target = post_data.preview.images[0]\r\n          //Use gif source if it's available\r\n          if(target.variants && target.variants.gif){\r\n            target = target.variants.gif\r\n          }\r\n\r\n          for(const image_object of target.resolutions){\r\n            preview_src_set += image_object.url + ' ' + image_object.width + 'w, '\r\n          }\r\n          preview_default_src = target.source.url\r\n        }\r\n        post_body = Post_Image_Body({\r\n          post_src: preview_default_src,\r\n          post_src_set: preview_src_set,\r\n          post_image_link: post_data.url,\r\n        })\r\n      }\r\n      else if(post_data.post_hint == 'hosted:video'){\r\n        post_body = Post_Video_Body({\r\n          video_src: post_data.media.reddit_video.fallback_url,\r\n          poster_src: post_data.preview.images[0].source.url,\r\n        })\r\n      }\r\n      else if(post_data.post_hint == 'rich:video'){\r\n        post_body = '<div class=\"video-container\">' + he.decode(post_data.media_embed.content) + '</div>'\r\n      }\r\n      else if(post_data.post_hint == 'link'){\r\n        post_body = Post_Body({\r\n          post_body: '<a href=\"' + post_data.url + '\">' + post_data.url + '</a>'\r\n        })\r\n      }\r\n      else{\r\n        console.error(\"Uhhh I haven't seen this post hint before: \" + post_data.post_hint)\r\n      }\r\n\r\n    }\r\n    // Link only post\r\n    else if(post_data.url){\r\n      post_body = Post_Body({\r\n        post_body: '<a href=\"' + post_data.url + '\">' + post_data.url + '</a>'\r\n      })\r\n    }\r\n\r\n    const post = Post({\r\n      post_header: opts.show_post_header ? post_header:'',\r\n      post_title: opts.show_post_title ? post_title:'',\r\n      post_body: opts.show_post_body ? post_body:'',\r\n    })\r\n    outputHTML.push(post)\r\n  }\r\n\r\n  if(opts.show_comments_section && opts.show_comments_section_header){\r\n    outputHTML.push(`\r\n      <div class=\"header-spacer-lg\"></div>\r\n      <h3 class=\"comment-header\">Comments</h3>\r\n      <hr class=\"comment-seperator\"/>\r\n      <div class=\"header-spacer\"></div>\r\n      `)\r\n  }\r\n\r\n  // List containing all the comment data to be rendered\r\n  const commentQ = []\r\n\r\n  if(opts.show_comments_section)\r\n    for(let i=comments.length-1; i>=0; i--){\r\n      //Ignores random blank comments with no html\r\n      if(comments[i].data.body_html){\r\n        if(opts.ignore_sticky_comments && comments[i].data.stickied)\r\n          continue\r\n        commentQ.push({\r\n          item_data: comments[i].data,\r\n          depth: 0\r\n        })\r\n      }\r\n    }\r\n\r\n  const now = Date.now()\r\n  initial_shift = opts.initial_padding\r\n  shift_diff = opts.padding_per_depth\r\n  while(commentQ.length > 0){\r\n\r\n    const {item_data, depth} = commentQ.pop()\r\n    item_data.score = formatScore(item_data.score)\r\n\r\n    if(opts.max_depth>=0 && depth > opts.max_depth)\r\n      continue\r\n\r\n    const comment = Comment({\r\n      left_padding: initial_shift + shift_diff * depth,\r\n      post_link: 'https://reddit.com' + item_data.permalink,\r\n      author_name: item_data.author,\r\n      author_class: item_data.is_submitter ? 'authorname bold': 'authorname',\r\n      comment_points: item_data.score,\r\n      point_plural: item_data.score == 1 ? '':'s',\r\n      time_ago: timeDifference(now, item_data.created_utc*1000),\r\n      body: he.decode(item_data.body_html),\r\n    })\r\n    outputHTML.push(comment)\r\n\r\n    //Add replies to queue\r\n    if(item_data.replies){\r\n      replies = item_data.replies.data.children\r\n      for(let i = replies.length-1; i>=0; i--){\r\n        if(replies[i].data.body_html)\r\n          commentQ.push({\r\n            item_data: replies[i].data,\r\n            depth: depth + 1\r\n          })\r\n      }\r\n    }\r\n  }\r\n\r\n  div.innerHTML = outputHTML.join('\\n')\r\n\r\n  // Post-processing rendered html\r\n  for(const anchor of div.getElementsByTagName('a')){\r\n    if(opts.improve_spoiler_links && spoiler_links.includes(anchor.getAttribute('href'))){\r\n      // Visual indicator for spoiler links\r\n      anchor.innerHTML += '<sup class=\"expand-button\">+</sup>'\r\n      // Show the user an alert when clicking a spoiler link\r\n      anchor.href = ''\r\n      anchor.setAttribute('onclick', 'alert(\"This is a spoiler link, hover over it to see the spoiler text\"); return false;')\r\n    }\r\n    else{\r\n      if(opts.open_links_in_new_tab)\r\n        anchor.setAttribute('target', '_blank')\r\n    }\r\n  }\r\n\r\n  // Make spoiler tags toggle when clicked\r\n  for(const spoiler of div.getElementsByClassName('md-spoiler-text')){\r\n    spoiler.setAttribute('onclick', \"this.setAttribute('class', 'md-spoiler-revealed')\")\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n  return{\r\n    embed: embed,\r\n    setDefaults: setDefaults,\r\n    embedAll: embedAll,\r\n  }\r\n\r\n}();\r\n"]}